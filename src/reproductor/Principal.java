/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package reproductor;

import java.awt.Image;
import java.io.File;

import java.util.TimerTask;
import java.util.Timer;

import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 *
 * @author jose
 */
public class Principal extends javax.swing.JFrame {

    private GestorAlbumes gestor;
    private Album albumActual;
    private ListaDobleCircular<Foto> fotosActuales;
    int contador;
    Timer timer;
    private boolean loopInfinito;
    private Foto fotoTemporal;

    private List<Album> albumes;
    
    private boolean enPausa = false; 

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        this.setLocationRelativeTo(this);
        gestor = new GestorAlbumes();
        albumes = gestor.getAlbumes();
        cargarDesdeXML("albumes.xml");
        //mostrar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        albumjTextField = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        imagenjLabel3 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        iniciarjButton8 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        pausarjButton9 = new javax.swing.JButton();
        pararjButton10 = new javax.swing.JButton();
        siguientejButton1 = new javax.swing.JButton();
        anteriorjButton2 = new javax.swing.JButton();
        ultimajButton3 = new javax.swing.JButton();
        primerajButton6 = new javax.swing.JButton();
        manualjRadioButton1 = new javax.swing.JRadioButton();
        reproducirinfiritojRadioButton2 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        numerojTextField1 = new javax.swing.JTextField();
        irjButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton5.setText("Crear");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre Album:");

        jButton7.setText("Guardar Imagen");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        iniciarjButton8.setText("Iniciar");
        iniciarjButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarjButton8ActionPerformed(evt);
            }
        });

        jButton4.setText("Cargar Imagen");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        pausarjButton9.setText("Pausar");
        pausarjButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausarjButton9ActionPerformed(evt);
            }
        });

        pararjButton10.setText("Parar");
        pararjButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararjButton10ActionPerformed(evt);
            }
        });

        siguientejButton1.setText("Siguiente");
        siguientejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguientejButton1ActionPerformed(evt);
            }
        });

        anteriorjButton2.setText("Anterior");
        anteriorjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorjButton2ActionPerformed(evt);
            }
        });

        ultimajButton3.setText("Ultima");
        ultimajButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ultimajButton3ActionPerformed(evt);
            }
        });

        primerajButton6.setText("Primera");
        primerajButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primerajButton6ActionPerformed(evt);
            }
        });

        manualjRadioButton1.setText("Manual");
        manualjRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualjRadioButton1ActionPerformed(evt);
            }
        });

        reproducirinfiritojRadioButton2.setText("Loop Infinito");
        reproducirinfiritojRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reproducirinfiritojRadioButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("No.");

        irjButton1.setText("IR");
        irjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                irjButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(manualjRadioButton1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reproducirinfiritojRadioButton2)
                            .addComponent(jButton7)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(albumjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5))
                        .addComponent(imagenjLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(anteriorjButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ultimajButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(siguientejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(primerajButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iniciarjButton8)
                        .addGap(18, 18, 18)
                        .addComponent(pausarjButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pararjButton10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(numerojTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(irjButton1)))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(albumjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imagenjLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton7)
                            .addComponent(iniciarjButton8)
                            .addComponent(pausarjButton9)
                            .addComponent(pararjButton10))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(siguientejButton1)
                            .addComponent(primerajButton6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ultimajButton3)
                            .addComponent(anteriorjButton2)
                            .addComponent(manualjRadioButton1)
                            .addComponent(reproducirinfiritojRadioButton2)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(numerojTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(irjButton1)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Para crear Nombre del Album
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        String nombreAlbum = albumjTextField.getText();

        if (nombreAlbum.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un nombre para el álbum.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si el nombre del álbum está vacío
        }

        Album nuevoAlbum = new Album(nombreAlbum);

        gestor.agregarAlbum(nuevoAlbum);

        gestor.guardarEnXML("albumes.xml");

        JOptionPane.showMessageDialog(this, "Álbum guardado exitosamente.");

        albumjTextField.setText("");

        jComboBox1.removeAllItems();
        llenarcombo();
    }//GEN-LAST:event_jButton5ActionPerformed

  
    
    //Para guardar la imagen
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        if (jComboBox1.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un álbum primero.");
            return;
        }

        if (fotoTemporal == null) {
            JOptionPane.showMessageDialog(this, "No hay ninguna imagen cargada para guardar.");
            return;
        }

        // Obtener el álbum seleccionado
        Album albumSeleccionado = albumes.get(jComboBox1.getSelectedIndex());

        // Agregar la foto al álbum
        albumSeleccionado.getFotos().agregar(fotoTemporal);

        // Guardar los álbumes en el archivo XML
        gestor.guardarEnXML("albumes.xml");

        // Limpiar la imagen temporal
        fotoTemporal = null;

        JOptionPane.showMessageDialog(this, "Imagen agregada al álbum exitosamente.");
        imagenjLabel3.setText("");

    }//GEN-LAST:event_jButton7ActionPerformed

    //Para reproducir el album
    private void iniciarjButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarjButton8ActionPerformed
        // TODO add your handling code here:
        
        int selectedIndex = jComboBox1.getSelectedIndex();
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un álbum primero.");
            return;
        }
        Album albumSeleccionado = albumes.get(selectedIndex);
        fotosActuales = albumSeleccionado.getFotos();
        reproducirImagenes();
        
    }//GEN-LAST:event_iniciarjButton8ActionPerformed

 
    //Boton para cargar la imagen
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        if (jComboBox1.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un álbum primero.");
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Imágenes", "png", "jpg");
        fileChooser.setFileFilter(filtro);
        int resultado = fileChooser.showOpenDialog(this);
        if (resultado != JFileChooser.CANCEL_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (file != null && !file.getName().equals("")) {
                // Crear una nueva foto temporal
                fotoTemporal = new Foto(file.getAbsolutePath());

                // Actualizar la visualización de la imagen en el JLabel
                showImage(file.getAbsolutePath());

            } else {
                JOptionPane.showMessageDialog(this, "Error al abrir el archivo.");
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    //Para pausar el Album
    private void pausarjButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausarjButton9ActionPerformed
        // TODO add your handling code here:
        if (timer != null)
            timer.cancel();
         enPausa = true;
    }//GEN-LAST:event_pausarjButton9ActionPerformed

    private void pararjButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pararjButton10ActionPerformed
        // TODO add your handling code here:
        if (timer != null) {
            timer.cancel();
            contador = 0;
        }
    }//GEN-LAST:event_pararjButton10ActionPerformed

    private void siguientejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguientejButton1ActionPerformed
        // TODO add your handling code here:
         if (fotosActuales != null) {
            mostrarImagen(fotosActuales.siguiente().getRuta());
        }
       
    }//GEN-LAST:event_siguientejButton1ActionPerformed

    private void primerajButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primerajButton6ActionPerformed
        // TODO add your handling code here:
        if (fotosActuales != null) {
            fotosActuales.reset();
            fotosActuales.ultima();
            mostrarImagen(fotosActuales.siguiente().getRuta());
        }
        
    }//GEN-LAST:event_primerajButton6ActionPerformed

    private void anteriorjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorjButton2ActionPerformed
        // TODO add your handling code here:
        if (fotosActuales != null) {
            mostrarImagen(fotosActuales.anterior().getRuta());
        }
    }//GEN-LAST:event_anteriorjButton2ActionPerformed

    private void ultimajButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ultimajButton3ActionPerformed
        // TODO add your handling code here:
         if (fotosActuales != null && !fotosActuales.esVacia()) {
        // Mover al último elemento
        Foto ultimaFoto = fotosActuales.ultima();
        mostrarImagen(ultimaFoto.getRuta());
    } 
        
    }//GEN-LAST:event_ultimajButton3ActionPerformed

    private void reproducirinfiritojRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reproducirinfiritojRadioButton2ActionPerformed
        // TODO add your handling code here:
        loopInfinito = reproducirinfiritojRadioButton2.isSelected();
    }//GEN-LAST:event_reproducirinfiritojRadioButton2ActionPerformed

    private void manualjRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualjRadioButton1ActionPerformed
        // TODO add your handling code here:
         if (timer != null) {
            timer.cancel();
            contador = 0;
        }
    }//GEN-LAST:event_manualjRadioButton1ActionPerformed

    private void irjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_irjButton1ActionPerformed

   try {
        int imagen = Integer.parseInt(numerojTextField1.getText());
        if (imagen >= 0 && imagen < fotosActuales.size()) {
            fotosActuales.reset(); 
            for (int i = 0; i < imagen; i++) {
                fotosActuales.siguiente(); 
            }
            mostrarImagen(fotosActuales.anterior().getRuta()); 
        } else if (imagen == fotosActuales.size()) {
 
            mostrarImagen(fotosActuales.ultima().getRuta());
        } else {
            
            JOptionPane.showMessageDialog(this, "Índice fuera de rango.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Ingrese un número válido.");
    } 
         
        
    }//GEN-LAST:event_irjButton1ActionPerformed

    
    
    //Para cargar la imagen en el Jlabel
    private void showImage(String imagePath) {

        if (imagePath == null || imagePath.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ruta de imagen no válida.");
            return;
        }

        ImageIcon icon = new ImageIcon(imagePath);
        Image img = icon.getImage();
        Image imgScaled = img.getScaledInstance(imagenjLabel3.getWidth(), imagenjLabel3.getHeight(), Image.SCALE_SMOOTH);

        imagenjLabel3.setIcon(new ImageIcon(imgScaled));
    }

    
    //Para llenar el ComboboX con los nombres de los albumes
    private void llenarcombo() {
        for (Album t : GestorAlbumes.albumes) {
            jComboBox1.addItem(t.getNombre());
        }
        
    }
   
    
    private void reproducirImagenes() {
    if (fotosActuales == null || fotosActuales.esVacia()) {
        JOptionPane.showMessageDialog(this, "No hay imágenes para reproducir.");
        return;
    }

    // Si no está en pausa, resetea el contador y el iterador
    if (!enPausa) {
        contador = 0;
        fotosActuales.reset();
        fotosActuales.ultima();
    } else {
        enPausa = false; // Al reanudar, quita la pausa
    }

    TimerTask tarea = new TimerTask() {
        public void run() {
            if (contador >= fotosActuales.size() && !loopInfinito) {
                timer.cancel();
                return;
            }

            Foto foto = fotosActuales.siguiente();
            mostrarImagen(foto.getRuta());
            contador++;
        }
    };
   
    timer = new Timer();
    timer.schedule(tarea, 0, 1000); // Intervalo de 2 segundos entre cada imagen
}
    
    
    //Para mostrar la imagen
    private void mostrarImagen(String ruta) {
        if (ruta == null || ruta.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ruta de imagen no válida.");
            return;
        }

        ImageIcon icon = new ImageIcon(ruta);
        Image img = icon.getImage();
        Image imgScaled = img.getScaledInstance(imagenjLabel3.getWidth(), imagenjLabel3.getHeight(), Image.SCALE_SMOOTH);

        imagenjLabel3.setIcon(new ImageIcon(imgScaled));
    }
    
   
    
    //Mi carga automatica del xml
    private void cargarDesdeXML(String filePath) {
        try {
            File archivo = new File(filePath);
            if (!archivo.exists()) {
                return; // Si el archivo no existe, no hacer nada
            }

            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(archivo);
            doc.getDocumentElement().normalize();

            NodeList listaAlbumes = doc.getElementsByTagName("album");

            for (int i = 0; i < listaAlbumes.getLength(); i++) {
                Element albumElement = (Element) listaAlbumes.item(i);
                String nombreAlbum = albumElement.getElementsByTagName("nombre").item(0).getTextContent();
                Album albumExistente = gestor.getAlbum(nombreAlbum);

                if (albumExistente == null) {
                    // Si el álbum no existe, crear uno nuevo
                    albumExistente = new Album(nombreAlbum);
                    gestor.agregarAlbum(albumExistente);
                }

                Element fotosElement = (Element) albumElement.getElementsByTagName("fotos").item(0);
                NodeList listaRutas = fotosElement.getElementsByTagName("ruta");
                for (int j = 0; j < listaRutas.getLength(); j++) {
                    Element rutaElement = (Element) listaRutas.item(j);
                    String pathFoto = rutaElement.getTextContent();
                    Foto foto = new Foto(pathFoto);

                    // Agregar la foto al álbum
                    albumExistente.getFotos().agregar(foto);
                }
            }

            llenarcombo();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar el archivo XML: " + e.getMessage());
        }
    }

    
    private void infinito() {
    // ... (resto de tu código)

    TimerTask tarea = new TimerTask() {
        public void run() {
            if (contador >= fotosActuales.size()) {
                if (loopInfinito) {
                    contador = 0; // Reiniciar contador
                } else {
                    timer.cancel();
                    return;
                }
            }

            // ... (resto de tu código para mostrar la imagen)
            contador++;
        }
    };

    // ... (resto de tu código)
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField albumjTextField;
    private javax.swing.JButton anteriorjButton2;
    private javax.swing.JLabel imagenjLabel3;
    private javax.swing.JButton iniciarjButton8;
    private javax.swing.JButton irjButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton manualjRadioButton1;
    private javax.swing.JTextField numerojTextField1;
    private javax.swing.JButton pararjButton10;
    private javax.swing.JButton pausarjButton9;
    private javax.swing.JButton primerajButton6;
    private javax.swing.JRadioButton reproducirinfiritojRadioButton2;
    private javax.swing.JButton siguientejButton1;
    private javax.swing.JButton ultimajButton3;
    // End of variables declaration//GEN-END:variables
}
